X <- d[[2]]
# generate models
ss <- model_path(y,X,1000)
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
print(dim(ss))
train <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
MSE_i <- apply(M,2,function(m) {
#' @return scalar
print(dim(m))
mean(sum((y[k] - X[k,]%*%m)^2))
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
test_mse <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
MSE_1 <- test_mse(y,X,train(y,X,ss.b,fold_1)[[1]],fold_2)
MSE_2 <- test_mse(y,X,train(y,X,ss.b,fold_2)[[1]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
return(list(MSE_1,MSE_2,LM_MSE))
}
subset_selection(100,5)
subset_selection(100,6)
dim(vector(1:20))
dim(1:20)
length(1:20)
subset_selection <- function(n,p) {
# call dgf to generate n x p data
d <- dgf(n,p)
print(dim(d[[2]]))
y <- d[[1]]
X <- d[[2]]
# generate models
ss <- model_path(y,X,1000)
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
print(dim(ss))
train <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
MSE_i <- apply(M,2,function(m) {
#' @return scalar
print(length(m))
mean(sum((y[k] - X[k,]%*%m)^2))
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
test_mse <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
MSE_1 <- test_mse(y,X,train(y,X,ss.b,fold_1)[[1]],fold_2)
MSE_2 <- test_mse(y,X,train(y,X,ss.b,fold_2)[[1]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
return(list(MSE_1,MSE_2,LM_MSE))
}
subset_selection(100,5)
subset_selection(100,6)
subset_selection <- function(n,p) {
# call dgf to generate n x p data
d <- dgf(n,p)
print(dim(d[[2]]))
y <- d[[1]]
X <- d[[2]]
# generate models
ss <- model_path(y,X,1000)
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
print(dim(ss))
train <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
MSE_i <- apply(M,2,function(m) {
#' @return scalar
print(length(m))
mean(sum((y[k] - X[k,]%*%m)^2))
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
test_mse <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
MSE_1 <- test_mse(y,X,train(y,X,ss,fold_1)[[1]],fold_2)
MSE_2 <- test_mse(y,X,train(y,X,ss,fold_2)[[1]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
return(list(MSE_1,MSE_2,LM_MSE))
}
subset_selection(100,5)
subset_selection(100,6)
subset_selection(100,50)
subset_selection <- function(n,p) {
# call dgf to generate n x p data
d <- dgf(n,p)
y <- d[[1]]
X <- d[[2]]
# generate models
ss <- model_path(y,X,1000)
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
train <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
MSE_i <- apply(M,2,function(m) {
#' @return scalar
mean(sum((y[k] - X[k,]%*%m)^2))
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
test_mse <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
MSE_1 <- test_mse(y,X,train(y,X,ss,fold_1)[[1]],fold_2)
MSE_2 <- test_mse(y,X,train(y,X,ss,fold_2)[[1]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
return(list(MSE_1,MSE_2,LM_MSE))
}
subset_selection(100,5)
subset_selection(100,50)
subset_selection(100,2)
subset_selection(100,51)
subset_selection(100,60)
?attr
subset_selection <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
mse_i <- apply(M,2,function(m) {
mean(sum((y[k] - X[k,]%*%m)^2))
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
mse_i <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
CV_k <- function(n,p) {
# call dgf to generate n x p data
d <- dgf(n,p)
y <- d[[1]]
X <- d[[2]]
# generate models
ss <- model_path(y,X,1000)
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
MSE_1 <- mse_i(y,X,subset_selection(y,X,ss,fold_1)$coefficients,fold_2)
MSE_2 <- mse_i(y,X,train(y,X,ss,fold_2)[["coefficients"]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
return(list(MSE_1,MSE_2,LM_MSE))
}
CV_k(100,5)
mse_i <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
subset_selection <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
mse_i <- apply(M,2,function(m) {
mse_i(y,X,m,k)
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
CV_k <- function(n,p) {
# call dgf to generate n x p data
d <- dgf(n,p)
y <- d[[1]]
X <- d[[2]]
# generate models
ss <- model_path(y,X,1000)
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
MSE_1 <- mse_i(y,X,subset_selection(y,X,ss,fold_1)$coefficients,fold_2)
MSE_2 <- mse_i(y,X,train(y,X,ss,fold_2)[["coefficients"]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
return(list(MSE_1,MSE_2,LM_MSE))
}
CV_k(100,5)
mse_i <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
subset_selection <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
MSE_i <- apply(M,2,function(m) {
mse_i(y,X,m,k)
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
CV_k <- function(n,p) {
# call dgf to generate n x p data
d <- dgf(n,p)
y <- d[[1]]
X <- d[[2]]
# generate models
ss <- model_path(y,X,1000)
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
MSE_1 <- mse_i(y,X,subset_selection(y,X,ss,fold_1)$coefficients,fold_2)
MSE_2 <- mse_i(y,X,train(y,X,ss,fold_2)[["coefficients"]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
return(list(MSE_1,MSE_2,LM_MSE))
}
CV_k(100,5)
CV_k(100,6\50)
CV_k(100,50)
mse_i <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
subset_selection <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
MSE_i <- apply(M,2,function(m) {
mse_i(y,X,m,k)
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
CV_k <- function(n,p) {
# call dgf to generate n x p data
d <- dgf(n,p)
y <- d[[1]]
X <- d[[2]]
# generate models
path <- model_path(y,X,1000)
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
MSE_1 <- mse_i(y,X,subset_selection(y,X,path,fold_1)$coefficients,fold_2)
MSE_2 <- mse_i(y,X,train(y,X,path,fold_2)[["coefficients"]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
return(list(MSE_1,MSE_2,LM_MSE))
}
CV_k(100,5)
CV_k(100,50)
CV_k(100,2)
CV_k(100,50)
CV_k(100,20)
CV_k(100,5)
CV_k(100,10)
CV_k(100,20)
CV_k(100,50)
mse_i <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
subset_selection <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
MSE_i <- apply(M,2,function(m) {
mse_i(y,X,m,k)
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
CV_k <- function(n,p) {
# call dgf to generate n x p data
d <- dgf(n,p)
y <- d[[1]]
X <- d[[2]]
# generate models
path <- model_path(y,X,1000)
ix <- sample(1:n,n)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
# obtain test MSE using k-fold
tmse_1 <- mse_i(y,X,subset_selection(y,X,path,fold_1)[["coefficients"]],fold_2)
tmse_1 <- mse_i(y,X,train(y,X,path,fold_2)[["coefficients"]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
return(list(MSE_1,MSE_2,LM_MSE))
}
CV_k(100,5)
mse_i <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
subset_selection <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
MSE_i <- apply(M,2,function(m) {
mse_i(y,X,m,k)
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
m = which.min(MSE_i)
)
}
ix <- sample(1:n,n)
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
# obtain test MSE using k-fold
tmse_1 <- mse_i(y,X,subset_selection(y,X,path,fold_1)[["coefficients"]],fold_2)
path <- model_path(y,X,1000)
par(mfrow=c(1,2))
matplot(path,pch=2, cex=.2, col="black",
ylab="level estimates",
xlab=expression(hat(beta)[j]^(m)),
main="")
plot(lm(y~X-1)$coefficients, pch=20, cex=.8,
ylab="level estimates",
xlab=expression(hat(beta)),
main="y~X")
ix <- sample(1:100,100)
fold_1 <- ix[1:50]
fold_2 <- ix[51:100]
# obtain test MSE using k-fold
tmse_1 <- mse_i(y,X,subset_selection(y,X,path,fold_1)[["coefficients"]],fold_2)
tmse_1 <- mse_i(y,X,train(y,X,path,fold_2)[["coefficients"]],fold_1)
LM_MSE <- sum(lm(y~X-1)$residuals^2)
subset_selection(y,M,path,)
subset_selection(y,M,path,fold_1)
subset_selection(y,X,path,fold_1)
mse_i <- function(y,X,m,i) {
mean(sum((y[i] - m%*%t(X[i,]))^2))
}
subset_selection <- function(y,X,M,k) {
#' @y
#' @X
#' @M
#' @k
# calculate MSE by iterate over M
MSE_i <- apply(M,2,function(m) {
mse_i(y,X,m,k)
})
# Return coef for model with min MSE
return(
list(
coefficients = M[,which.min(MSE_i)],
best_subset_m = which.min(MSE_i)
)
}
subset_selection(y,X,path,fold_2)
subset_selection(y,X,path,fold_1)
subset_selection(y,X,path,fold_2)
subset_selection(y,X,path,fold_1)
subset_selection(y,X,path,fold_2)
subset_selection(y,X,path,fold_1)
subset_selection(y,X,path,fold_2)
# obtain test MSE using k-fold
tmse_1 <- mse_i(y,X,subset_selection(y,X,path,fold_1)[["coefficients"]],fold_2)
tmse_1 <- mse_i(y,X,train(y,X,path,fold_2)[["coefficients"]],fold_1)
# obtain test MSE using k-fold
fold_1_tmse <- mse_i(y,X,subset_selection(y,X,path,fold_1)[["coefficients"]],fold_2)
fold_2_tmse <- mse_i(y,X,subset_selection(y,X,path,fold_2)[["coefficients"]],fold_1)
subset_selection(y,X,path,fold_1)
subset_selection(y,X,path,fold_2)
which.min(fold_1_tmse,fold_2_tmse)
# obtain test MSE using k-fold
fold_1_tmse <- mse_i(y,X,subset_selection(y,X,path,fold_1)[["coefficients"]],fold_2)
# obtain test MSE using k-fold
fold_1_tmse <- mse_i(y,X,subset_selection(y,X,path,fold_1)[["coefficients"]],fold_2)
# obtain test MSE using k-fold
fold_1_tmse <- mse_i(y,X,subset_selection(y,X,path,fold_1)[["coefficients"]],fold_2)
fold_2_tmse <- mse_i(y,X,subset_selection(y,X,path,fold_2)[["coefficients"]],fold_1)
which.min(fold_1_tmse,fold_2_tmse)
fold_1_tmse
which.min(c(fold_1_tmse,fold_2_tmse))
split(cut(1:10,3))
split(1:10,cut(1:10,3))
split(1:100,cut(1:100,2))
split(1:10,cut(1:10,3,FALSE))
k_fold <- function(n,k) {
ix <- sample(1:n,n)
fold_i <- split(1:n,cut(1:n,k,FALSE))
return(
sapply(k,function(x) {
assign(print("fold",k,"_"),ix[fold_i[k]])
})
)
}
k_fold(100,2)
q
k_fold <- function(n,k) {
ix <- sample(1:n,n)
fold_i <- split(1:n,cut(1:n,k,FALSE))
return(
sapply(k,function(x) {
assign(paste("fold",k,"_"),ix[fold_i[k]])
})
)
}
k_fold(100,2)
q
k_fold <- function(n,k) {
ix <- sample(1:n,n)
fold_i <- split(1:n,cut(1:n,k,FALSE))
return(
sapply(k,function(x) {
assign(paste("fold",k,"_"),ix[fold_i[[k]]])
})
)
}
k_fold(100,2)
k_fold <- function(n,k) {
ix <- sample(1:n,n)
fold_i <- split(1:n,cut(1:n,k,FALSE))
folds <- lapply(k,function(x) {
assign(paste("fold",k,"_"),ix[fold_i[[k]]])
})
return(
)
}
k_fold(100,2)
k_fold <- function(n,k) {
ix <- sample(1:n,n)
fold_i <- split(1:n,cut(1:n,k,FALSE))
folds <- sapply(k,function(x) {
assign(paste("fold",k,"_"),ix[fold_i[[k]]])
})
return(
)
}
k_fold(100,2)
k_fold <- function(n,k) {
ix <- sample(1:n,n)
fold_i <- split(1:n,cut(1:n,k,FALSE))
folds <- sapply(k,function(x) {
assign(paste("fold",k,"_"),ix[fold_i[[k]]])
})
return(
folds
)
}
k_fold(100,2)
k_fold <- function(n,k) {
ix <- sample(1:n,n)
fold_i <- split(1:n,cut(1:n,k,FALSE))
sapply(k,function(x) {
assign(paste("fold",k,"_"),ix[fold_i[[k]]],envir=.GlobalEnv)
})
}
k_fold(100,2)
k_fold(100,4)
